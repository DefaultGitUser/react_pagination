{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","pagesCount","Math","ceil","className","cn","disabled","href","onClick","Array","from","length","_x","i","active","items","to","numbers","n","push","getNumbers","map","perPageArray","App","useState","setPerPage","setCurrentPage","arr","startIndex","finishIndex","min","visibleItems","slice","getPreparedData","id","onChange","e","value","target","selected","htmlFor","page","item","ReactDOM","render","document","getElementById"],"mappings":"oNASaA,EAA8B,SAAC,GAKrC,IAAD,IAJJC,aAII,MAJI,GAIJ,MAHJC,eAGI,MAHM,EAGN,MAFJC,mBAEI,MAFU,EAEV,MADJC,oBACI,MADW,aACX,EACEC,EAAaC,KAAKC,KAAKN,EAAQC,GAkBrC,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAA0B,IAAhBP,IAFd,SAKE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAK,QACL,gBACmB,IAAhBR,EACG,QACA,OAENS,QAhCS,WACK,IAAhBT,GAIJC,EAAaD,EAAc,IAkBvB,oBAcAU,MAAMC,KAAK,CAAEC,OAAQV,IAAc,SAACW,EAAIC,GAAL,OACnC,oBACET,UAAWC,IACT,YACA,CAAES,OAAQf,IAAgBc,EAAI,IAHlC,SAOE,mBACE,UAAQ,WACRT,UAAU,YACVG,KAAI,WAAMM,EAAI,GACdL,QAAS,kBAAMR,EAAaa,EAAI,IAJlC,SAMGA,EAAI,KARFA,MAaT,oBAAIT,UAAWC,IACb,YACA,CAAEC,SAAUP,IAAgBE,IAF9B,SAKE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBACER,IAAgBE,EACZ,OACA,QAENO,QA9DS,WACXT,IAAgBE,GAIpBD,EAAaD,EAAc,IAgDvB,wBCzEFgB,ECLC,SAAoBL,EAAcM,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIR,EAAMQ,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDFKG,CAAW,EAAG,IACzBC,KAAI,SAAAH,GAAC,qBAAYA,MAedI,EAAe,CAAC,EAAG,EAAG,GAAI,IAEnBC,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAO1B,EAAP,KAAgB2B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOzB,EAAP,KAAoB2B,EAApB,KACM7B,EAAQkB,EAAMJ,OAOpB,EAzBsB,SAACgB,EAAc7B,EAAiBC,GACtD,IAAM6B,GAAc7B,EAAc,GAAKD,EACnC+B,GAAe9B,EAAc,GAAKD,EAAUA,EAIhD,OAFA+B,EAAc3B,KAAK4B,IAAID,EAAaF,EAAIhB,QAEjC,CACLoB,aAAcJ,EAAIK,MAAMJ,EAAYC,GACpCD,WAAYA,EAAa,EACzBC,eAoBEI,CAAgBlB,EAAOjB,EAASC,GAHlCgC,EADF,EACEA,aACAH,EAFF,EAEEA,WACAC,EAHF,EAGEA,YAGF,OACE,sBAAKzB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWL,EADX,mBACiC6B,EADjC,cACiDC,EADjD,aAIA,sBAAKzB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACR8B,GAAG,kBACH9B,UAAU,eACV+B,SAAU,SAACC,GAAD,OAzBGC,GAyBmBD,EAAEE,OAAOD,MAxBjDZ,EAAWY,QACXX,EAAe,GAFK,IAACW,GAqBf,SAMIf,EAAaD,KAAI,SAAAgB,GAAK,OACtB,wBACEE,SAAUF,IAAUvC,EACpBuC,MAAOA,EAFT,SAIGA,WAMT,uBAAOG,QAAQ,kBAAkBpC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEP,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAc,SAACyC,GACbf,EAAee,MAInB,6BACIV,EAAaV,KAAI,SAAAqB,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAAoBA,aE/E9BC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9e18bdb0.chunk.js","sourcesContent":["import cn from 'classnames';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total = 42,\n  perPage = 5,\n  currentPage = 1,\n  onPageChange = () => {},\n}) => {\n  const pagesCount = Math.ceil(total / perPage);\n\n  const prevPage = () => {\n    if (currentPage === 1) {\n      return;\n    }\n\n    onPageChange(currentPage - 1);\n  };\n\n  const nextPage = () => {\n    if (currentPage === pagesCount) {\n      return;\n    }\n\n    onPageChange(currentPage + 1);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn(\n        'page-item',\n        { disabled: currentPage === 1 },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={\n            (currentPage !== 1)\n              ? 'false'\n              : 'true'\n          }\n          onClick={prevPage}\n        >\n          «\n        </a>\n      </li>\n      { Array.from({ length: pagesCount }, (_x, i) => (\n        <li\n          className={cn(\n            'page-item',\n            { active: currentPage === i + 1 },\n          )}\n          key={i}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${i + 1}`}\n            onClick={() => onPageChange(i + 1)}\n          >\n            {i + 1}\n          </a>\n        </li>\n      )) }\n\n      <li className={cn(\n        'page-item',\n        { disabled: currentPage === pagesCount },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={\n            currentPage === pagesCount\n              ? 'true'\n              : 'false'\n          }\n          onClick={nextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst getPreparedData = (arr:string[], perPage: number, currentPage:number) => {\n  const startIndex = (currentPage - 1) * perPage;\n  let finishIndex = (currentPage - 1) * perPage + perPage;\n\n  finishIndex = Math.min(finishIndex, arr.length);\n\n  return {\n    visibleItems: arr.slice(startIndex, finishIndex),\n    startIndex: startIndex + 1,\n    finishIndex,\n  };\n};\n\nconst perPageArray = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const total = items.length;\n\n  const changePerPage = (value: number) => {\n    setPerPage(value);\n    setCurrentPage(1);\n  };\n\n  const {\n    visibleItems,\n    startIndex,\n    finishIndex,\n  } = getPreparedData(items, perPage, currentPage);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startIndex} - ${finishIndex} of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(e) => changePerPage(+e.target.value)}\n          >\n            { perPageArray.map(value => (\n              <option\n                selected={value === perPage}\n                value={value}\n              >\n                {value}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={(page: number) => {\n          setCurrentPage(page);\n        }}\n      />\n\n      <ul>\n        { visibleItems.map(item => (\n          <li data-cy=\"item\">{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}